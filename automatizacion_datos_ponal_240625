#  C√≥digo para automatizar la descarga de datos delictivos desde la p√°gina de la Polic√≠a Nacional de Colombia

# üì¶ Importaci√≥n de librer√≠as necesarias para automatizar el navegador y manejar archivos

from selenium import webdriver  # Controla el navegador autom√°ticamente (abrir, hacer clic, llenar formularios, etc.)
from selenium.webdriver.chrome.service import Service  # Configura c√≥mo se lanza el navegador Chrome
from selenium.webdriver.chrome.options import Options  # Permite ajustar opciones de comportamiento para Chrome
from selenium.webdriver.common.by import By  # Permite encontrar elementos de la p√°gina por su ID, clase, nombre, etc.
from selenium.webdriver.common.keys import Keys  # Permite simular teclas del teclado, como Enter
from selenium.webdriver.support.ui import WebDriverWait  # Espera hasta que elementos aparezcan antes de seguir
from selenium.webdriver.support import expected_conditions as EC  # Define condiciones para esperar elementos espec√≠ficos
from webdriver_manager.chrome import ChromeDriverManager  # Descarga y mantiene actualizado el controlador de Chrome

import time  # Permite pausar el programa por segundos
import os  # Permite acceder al sistema de archivos (carpetas, nombres de archivos, mover archivos, etc.)
import urllib.parse  # Permite traducir o leer direcciones web (URLs) codificadas
import unidecode  # Permite remover acentos de palabras para facilitar las comparaciones

# üóìÔ∏è Diccionario que convierte nombres de meses a su n√∫mero correspondiente (por ejemplo: MAYO ‚Üí 05)
MESES = {
    "ENERO": "01", "FEBRERO": "02", "MARZO": "03", "ABRIL": "04",
    "MAYO": "05", "JUNIO": "06", "JULIO": "07", "AGOSTO": "08",
    "SEPTIEMBRE": "09", "OCTUBRE": "10", "NOVIEMBRE": "11", "DICIEMBRE": "12"
}

# üìÇ Lista de delitos que se van a buscar, junto con la ruta donde se deben guardar los archivos descargados
delitos_a_descargar = [
    ("Delitos sexuales", r"C:\Users\USUARIO\Desktop\Seguridad\DelitosSexuales\Raw"),
    ("Homicidios", r"C:\Users\USUARIO\Desktop\Seguridad\Homicidios\Raw"),
    ("Lesiones personales", r"C:\Users\USUARIO\Desktop\Seguridad\LesionesPersonales\Raw"),
    ("Hurto a personas", r"C:\Users\USUARIO\Desktop\Seguridad\HurtoPersonas\Raw"),
    ("Hurto de automotores", r"C:\Users\USUARIO\Desktop\Seguridad\HurtoAutomotores\Raw"),
    ("Violencia intrafamiliar", r"C:\Users\USUARIO\Desktop\Seguridad\ViolenciaIntrafamiliar\Raw"),
    ("Hurtos a entidades comerciales", r"C:\Users\USUARIO\Desktop\Seguridad\HurtosEntidadesComerciales\Raw"),
    ("Hurtos a entidades financieras", r"C:\Users\USUARIO\Desktop\Seguridad\HurtosEntidadesFinancieras\Raw"),
    ("Hurto a residencias", r"C:\Users\USUARIO\Desktop\Seguridad\HurtoResidencias\Raw"),
]

# üîç A√±o y mes que se quieren filtrar en la p√°gina web
ANIO = "2025"
MES_VISIBLE = "MAYO"  # Nombre del mes como aparece en la web
MES_NUM = MESES[MES_VISIBLE.upper()]  # Se convierte a n√∫mero (ej. "MAYO" ‚Üí "05")

# ‚è≥ Funci√≥n que espera a que el archivo termine de descargarse y luego lo renombra con un nombre estandarizado
def esperar_descarga_y_renombrar(carpeta, nombre_final):
    timeout = 30  # Tiempo m√°ximo de espera en segundos
    tiempo_espera = 0  # Contador para controlar cu√°nto tiempo llevamos esperando

    while tiempo_espera < timeout:
        # Buscar archivos de Excel (.xlsx) que ya se hayan descargado completamente
        archivos = [f for f in os.listdir(carpeta) if f.endswith(".xlsx") and not f.endswith(".crdownload")]
        if archivos:
            # Toma el archivo m√°s reciente descargado
            archivo = max([os.path.join(carpeta, f) for f in archivos], key=os.path.getctime)
            nueva_ruta = os.path.join(carpeta, nombre_final)  # Ruta nueva con nombre final deseado
            os.rename(archivo, nueva_ruta)  # Cambia el nombre del archivo descargado
            print(f"‚úÖ Archivo renombrado a: {nueva_ruta}")
            return
        time.sleep(1)  # Espera 1 segundo antes de volver a revisar
        tiempo_espera += 1  # Suma 1 segundo al contador

    print("‚ùå Descarga no detectada o no completada a tiempo.")

# üñ±Ô∏è Funci√≥n que aplica los filtros en la web para buscar el delito y a√±o deseado, luego descarga el archivo
def aplicar_filtros_y_descargar(driver, wait, delito, ruta_descarga):
    os.makedirs(ruta_descarga, exist_ok=True)  # Crea la carpeta de destino si no existe

    try:
        print(f"\nüîç Buscando: {delito} ({ANIO})")

        # Hace clic en el men√∫ del filtro de delitos
        wait.until(EC.element_to_be_clickable((By.ID, "select2-edit-field-delito-de-impacto-target-id-container"))).click()
        # Escribe el nombre del delito
        input_delito = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "input.select2-search__field")))
        input_delito.clear()
        input_delito.send_keys(delito)
        time.sleep(0.5)
        input_delito.send_keys(Keys.ENTER)

        # Hace clic en el filtro de a√±o
        wait.until(EC.element_to_be_clickable((By.ID, "select2-edit-field-ano-deltos-impacto-value-container"))).click()
        # Escribe el a√±o
        input_anio = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "input.select2-search__field")))
        input_anio.clear()
        input_anio.send_keys(ANIO)
        time.sleep(0.5)
        input_anio.send_keys(Keys.ENTER)

        # Hace clic en el bot√≥n "Buscar"
        boton = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(@class,'form-submit') and normalize-space()='Buscar']")))
        driver.execute_script("arguments[0].scrollIntoView(true); window.scrollBy(0,200);", boton)  # Asegura que el bot√≥n est√© visible
        time.sleep(0.5)
        boton.click()

        # Espera 4 segundos para que cargue la tabla de resultados
        time.sleep(4)
        filas = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
        descargado = False  # Bandera para saber si se encontr√≥ el archivo

        # Recorre cada fila de resultados en la tabla
        for fila in filas:
            celdas = fila.find_elements(By.TAG_NAME, "td")
            if len(celdas) >= 3:
                texto_delito = celdas[0].text.strip().lower()  # Primer campo: nombre del delito
                texto_anio = celdas[1].text.strip()  # Segundo campo: a√±o
                link = celdas[2].find_element(By.TAG_NAME, "a")  # Tercer campo: enlace de descarga
                href = urllib.parse.unquote(link.get_attribute("href"))  # Se decodifica el link

                # Verifica que la fila coincide con el delito, a√±o y mes que buscamos
                if (
                    unidecode.unidecode(delito.lower().split()[0]) in unidecode.unidecode(texto_delito)
                    and texto_anio == ANIO
                    and MES_VISIBLE.lower() in href.lower()
                ):
                    full_url = "https://www.policia.gov.co" + href  # Completa la URL
                    print(f"üîó Enlace detectado: {full_url}")
                    driver.execute_script("arguments[0].click();", link)  # Hace clic en el enlace de descarga
                    print(f"üì• Descarga iniciada para: {delito}")
                    descargado = True

                    # Renombra el archivo con formato estandarizado
                    nombre_delito_limpio = unidecode.unidecode(delito.replace(" ", ""))
                    nombre_archivo = f"BD_{nombre_delito_limpio}_{ANIO}{MES_NUM}.xlsx"
                    esperar_descarga_y_renombrar(ruta_descarga, nombre_archivo)
                    break  # Sale del ciclo si ya encontr√≥ y descarg√≥ el archivo

        if not descargado:
            print(f"‚ùå No se encontr√≥ archivo para: {delito}")

    except Exception as e:
        print(f"‚ùå Error con '{delito}': {e}")  # Muestra el error si ocurre algo inesperado

# üöÄ Funci√≥n principal que controla todo el proceso: abre el navegador, recorre cada delito y ejecuta la descarga
def main():
    # Configura c√≥mo se abrir√° el navegador
    options = Options()
    options.add_argument("--window-size=1920,1080")  # Define tama√±o grande para evitar errores visuales
    options.add_experimental_option("prefs", {
        "download.prompt_for_download": False,  # No pedir confirmaci√≥n para descargar
        "directory_upgrade": True  # Permitir cambiar la carpeta de descarga
    })

    # Inicia el navegador Chrome con las configuraciones definidas
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver, 25)  # Define que esperar√° hasta 25 segundos por cada elemento

    try:
        # Recorre cada delito en la lista y ejecuta la descarga
        for delito, ruta in delitos_a_descargar:
            driver.get("https://www.policia.gov.co/estadistica-delictiva")  # Abre la p√°gina web
            driver.execute_cdp_cmd("Page.setDownloadBehavior", {
                "behavior": "allow",
                "downloadPath": ruta  # Define d√≥nde se guardar√° el archivo descargado
            })
            aplicar_filtros_y_descargar(driver, wait, delito, ruta)  # Llama la funci√≥n que filtra y descarga
            time.sleep(2)  # Espera 2 segundos entre descargas para evitar errores

    finally:
        driver.quit()  # Cierra el navegador al terminar todo
        print("\n‚úÖ Proceso completado para todos los delitos.")

# ‚ñ∂Ô∏è Inicia el programa si este archivo se est√° ejecutando directamente
if __name__ == "__main__":
    main()
